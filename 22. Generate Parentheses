class Solution {
public:
    // backtrack function
    void backtrack(int l, int r, int n, string& cur, vector<string>& ret) {
        # all string cur with the proper size are valid parentheses
        if (cur.size() == n * 2) {
            ret.push_back(cur);
            return;
        }
        # keep adding left parenthese until the number is equal to n
        if (l < n) {
            cur += '(';
            backtrack(l + 1, r, n, cur, ret);
            cur.pop_back();
        }
        # keep adding right parenthese until the number of right is equal to left
        if (r < l) {
            cur += ")";
            backtrack(l, r + 1, n, cur, ret);
            cur.pop_back();
        }
    }
    
    vector<string> generateParenthesis(int n) {
        vector<string> ret;
        string cur = "";
        backtrack(0, 0, n, cur, ret);
        return ret;
    }
};
