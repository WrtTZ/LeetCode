// 1. Note the negative powers
// 2. We use recursion for this question, in order to increase efficiency, use the trick to decrease n by 2 everytime.



class Solution {
public:
    double pow(double x, long long n) {
        if (n == 0) {  // edge case
            return 1;
        } else if (n < 0) {  // x^(-n) = (1/x)^n
            x = 1 / x;
            n = -n;
        } 
        return (n % 2 == 0) ? pow(x * x, n / 2) : x * pow(x * x, n / 2);  // x ^ 8 = (x ^ 2) ^ 4, x ^ 9 = x * (x ^ 2) ^ 4 
    }
    
    double myPow(double x, int n) {
        return pow(x,n);
    }
};
