class Solution {
public:
    
    void backtrack(vector<vector<int>>& ans, vector<int>& candidates, int target, int cur_sum, int cur_index, vector<int>& cur) {    
        if (cur_sum == target) {
            ans.push_back(cur);
            return;
        }
        
        while(cur_index < candidates.size() && cur_sum + candidates[cur_index] <= target) {
            cur_sum += candidates[cur_index];
            cur.push_back(candidates[cur_index]);
            backtrack(ans, candidates, target, cur_sum, cur_index, cur);
            cur.pop_back();
            cur_sum -= candidates[cur_index];
            cur_index += 1;
        }
        
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> ans;
        vector<int> cur;
        
        backtrack(ans, candidates, target, 0, 0, cur);
        return ans;
    }
};
